/* REXX - A Dynamic area example */
/* Doug Nadel, ISPF Panels - beyond the basics, March 2000            */
Address ISPEXEC                             /* Calls go to ISPF       */
red   = '01'x                               /* Assign colors to       */
blue  = '02'x                               /*     Attribute bytes    */
green = '03'x                               /*     found in the data  */
white = '04'x
maxlines = 600                              /* set max number of lines*/
dyndata  = ''                               /* initialize data        */
shadata  = ''                               /* initialize shadow var  */

Do  a = 1 to maxlines by 3                  /* Create some dummy data */
  dyndata=dyndata||white||left('This is'red  ||'red  'white||a  , 29)
  dyndata=dyndata||white||left('This is'blue ||'blue 'white||a+1, 29)
  dyndata=dyndata||white||left('This is'green||'green'white||a+2, 29)
  shadata=shadata||' r                            '
  shadata=shadata||' b                            '
  shadata=shadata||' g                            '
End

/*    Add a bottom of data maker to the end of the data      */
dyndata = dyndata||blue||centre(green||'BOTTOM'||blue,29,'*')
shadata = shadata||'                              '

curline = 1;                                /* set current line #     */

/* -------------------------------------------------------------------*/
/* Display loop until end or error                                    */
/* -------------------------------------------------------------------*/

Do Until disprc > 0
  dynarea = substr(dyndata,1+(curline-1)*30) /* set dynamic variable  */
  dynshad = substr(shadata,1+(curline-1)*30) /* set shadow variable   */
  size = length(dynarea)                   /* Set a scalar variable   */
  'ISPEXEC DISPLAY PANEL(PNDYN)'           /* Display the data        */
  disprc = rc                              /* save return code        */
  'ISPEXEC VGET (ZVERB,ZSCROLLA,ZSCROLLN)' /* get scroll values       */
  Select                                   /* Process scrolling       */
    When(zverb = 'UP')   Then              /* Scroll up               */
     If zscrolla = 'MAX' Then              /*  if scroll was max      */
      curline = 1                          /*     scroll to top       */
     Else                                  /*  else a number is known */
      curline = max(1,curline-zscrolln);   /* (maximum is top)        */
    When(zverb = 'DOWN') Then              /* Scroll down             */
     If zscrolla = 'MAX' Then              /*  if scroll was max      */
      curline = maxlines                   /*     scroll to bottom    */
     Else                                  /*  else a number is known */
      curline = min(maxlines,curline+zscrolln); /* (max is bottom)    */
     Otherwise;                     /* could use left & right too     */
  End
End                                        /* End of display loop     */
