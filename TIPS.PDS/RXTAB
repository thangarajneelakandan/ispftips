  /* ------------------------ REXX ------------------------ *
  | Sample REXX Code to drive an ISPF Table to demonstrate |
  | 1. Processing a command (Refresh)                      |
  | 2. Processing individual line selections               |
  | 3. Processing multiple line selections                 |
  | 4. Processing a range selection (SS/SS)                |
  | 5. Processing a range count (S###)                     |
  | 6. Demonstrate Only string capability                  |
  | 7. Uses IBM's ISRZ001 message (zedsmsg/zedlmsg)        |
  | 8. Use of Find and RFIND                               |
  | 9. Use of Locate (TBSCAN)                              |
  * ------------------------------------------------------ *
  | ISPF - Developers - Tips and Tricks                    |
  * ------------------------------------------------------ */
  /* ------------------------------------ *
  | Define Addressing to ISPFExec (ISPF) |
  * ------------------------------------ */
  Address ISPExec
  /* --------> Enable Repeat Find <------------ *
  | Check for APPLID (TABT) and if not then    |
  |   - create an ISPF Commands Table          |
  |   - add RFIND to it with a variable        |
  |   - reinvoke the current exec with NEWAPPL |
  |   - on return close the commands table     |
  * ------------------------------------------ */
  "VGET ZAPPLID"
  if zapplid <> "TABT" then do
    "TBCreate tabtcmds names(zctverb zcttrunc zctact" ,
      "zctdesc) replace share nowrite"
    zctverb = "RFIND"
    zcttrunc = 0
    zctact = "&USRRFIND"
    zctdesc = "User controlled Repeat Find (RFIND)"
    "TBAdd tabtcmds"
    "Select CMD(%"sysvar('sysicmd') options ") Newappl(tabt)" ,
      "passlib scrname(TABLE)"
    x_rc = rc
    "TBClose tabtcmds"
    Exit x_rc
  end
  /* --------------- *
  | Define defaults |
  * --------------- */
  null    = ''                            /* Null variable for compare */
  /* ---------------------------- *
  | Label for Refresh Processing |
  * ---------------------------- */
Refresh:
  /* ------------------------------------------------------- *
  | Define our ISPF Table with two variables and NOWRITE as |
  | it will not be saved.                                   |
  * ------------------------------------------------------- */
  "TBCreate test names(vitem vstate) nowrite"
  /* -------------------------------------- *
  | Now fill the ISPF table with test data |
  * -------------------------------------- */
  str = 'AbcDefGhiJklMnoPqrStuVwxYz0123456789'
  strc = 1
  vstate = null
  do i = 1 to 100
    vitem =  substr(str,strc,3) 'Test data number:' right(i+1000,3)
    strc = strc +3
    if strc > 34 then strc = 1
    "TBAdd test"
  end
  /* ------------------------------------------------ *
  | Table defined and populated - get to the top now |
  | and define our working variables                 |
  * ------------------------------------------------ */
  ztdsels = 0                   /* Define # rows selected to 0 */
  crp     = 1                   /* Define the starting row to 1 */
  save_floc = 0                 /* Save last find location */
  save_find = null              /* save last find string */
  /* --------------------------------------------------- *
  | Process the table forever - until we say we're done |
  * --------------------------------------------------- */
  do forever
    /* -------------------------------------------- *
    | Define USRRFIND for Passthru to enable RFIND |
    * -------------------------------------------- */
    usrrfind = 'PASSTHRU'
    'vput (usrrfind)'
    /* ---------------------------------------------------- *
    | Test ZTDSELS - if greater than zero than display the |
    | table without the Panel name                         |
    | - if zero than display with the Panel name           |
    |   after 1st reseting the display to the last location|
    * ---------------------------------------------------- */
    if ztdsels > 0
    then 'tbdispl test'
    else do
      'tbtop test'
      'tbskip test number('crp')'
      'tbdispl test panel(pntab)'
    end
    trc = rc            /* Save the TBDISPL return code */
    /* ----------------------- *
    | Reset USRRFIND to blank |
    * ----------------------- */
    usrrfind = ''
    'vput (usrrfind)'
    /* ---------------------------------------------------------- *
    | If the return code from the table display (TBDISPL) is     |
    | greater than 4 then we are done so leave the forever loop. |
    * ---------------------------------------------------------- */
    if trc > 4 then leave
    /* ------------------------------------------------------- *
    | Test the zcmd for any commands that we are to           |
    | process.                                                |
    * ------------------------------------------------------- */
   /* ------------------------------- *
    | Test if there is a command      |
    * ------------------------------- */
    if zcmd /= null then
    if  abbrev("FIND",word(zcmd,1),1) = 1 then
       save_floc = ztdtop
    if zcmd = 'RFIND' then
       zcmd = 'FIND' save_find
    Select
      /* ------------------------------------------------- *
      | Find and Repeat Find processed.                   |
      |                                                   |
      |   Checks for the provided string in the specified |
      |   row variables.                                  |
      * ------------------------------------------------- */
      When abbrev("FIND",word(zcmd,1),1) = 1 then do
        find = translate(word(zcmd,2))
        save_find = find
        wrap   = 0
        if save_floc > 0 then do
          'tbtop test'
          'tbskip test number('save_floc')'
        end
        do forever
          'tbskip test'
          if rc > 0 then do
            'tbtop test'
            'tbskip test'
            if wrap = 1 then do
              zedsmsg = 'Not Found'
              zedlmsg = find 'string not found in any member' ,
                'name. Try again.'
              'setmsg msg(isrz001)'
              leave
            end
            else wrap = 1
          end
          if pos(find,translate(vitem)) > 0 then do
            'tbquery test position(row)'
            crp = row
            save_floc = row
            if wrap = 1 then do
              zedsmsg = 'Wrapped'
              zedlmsg = 'Find restarted at the top of the table.'
              'setmsg msg(isrz001)'
            end
            else do
              zedsmsg = 'Found'
              zedlmsg = 'Found in row:' row
              'setmsg msg(isrz001)'
            end
            leave
          end
        end
      end
      /* ---------------------------------------- *
      | Demonstrate Locate Processing on the row |
      * ---------------------------------------- */
      When abbrev("LOCATE",word(zcmd,1),1) = 1 then do
        vitem = translate(word(zcmd,2))
        'tbtop test'
        crp = 0
        'tbscan test arglist(vitem) position(crp) condlist(ge)'
        if rc = 0 then do
          zedsmsg = 'Found'
          zedlmsg = word(zcmd,2) 'was found in row' crp
          'Setmsg msg(isrz001)'
        end
        else do
          zedsmsg = 'Not Found'
          zedlmsg = word(zcmd,2) 'was not found'
          'Setmsg msg(isrz001)'
        end
      end
      /* ----------------------------------------------------------- *
      | Only will check for the provided string (case insensitive)  |
      | in any location within the row variables.                   |
      * ----------------------------------------------------------- */
      When abbrev("ONLY",word(zcmd,1),1) = 1 then do
        str = subword(zcmd,2)
        if strip(str) = null then do
          zedsmsg = 'Only Invalid'
          zedlmsg = 'Only requires a string parameter.'
          'Setmsg msg(isrz001)'
        end
        else do
          'tbtop test'
          do forever
            'tbskip test'
            if rc > 0 then do
              'tbtop test'
              leave
            end
            if pos(str,translate(vitem vstate)) = 0 then
            'tbdelete test'
          end
        end
      end
      /* ------------------------------------------------------- *
      | Refresh will close the table and then signal (goto) the |
      | Refresh label to start over.                            |
      * ------------------------------------------------------- */
      When abbrev("REFRESH",zcmd,1) = 1 then do
        'tbend test'
        signal Refresh
      end
      /* ------------------------------------------------------ *
      | Process unknown commands here - basically let the user |
      | know we didn't know what the command is that they      |
      | entered.                                               |
      * ------------------------------------------------------ */
      Otherwise do
        zedsmsg = 'Unknown'
        zedlmsg = zcmd 'is an unknown command - try again.'
        'Setmsg Msg(isrz001)'
      end
    end
    /* ------------------------------------------------------------ *
    | Process the line selections if the selection variable (vsel) |
    | is not null.                                                 |
    * ------------------------------------------------------------ */
    if strip(vsel) /= null then do

      /* ------------------------------------------------- *
      | This code is to support the selection by the user |
      | pressing enter on the row and not entering any    |
      | selection value (point and shoot).                |
      |                                                   |
      | 1. save the current top row                       |
      | 2. if the row selected via enter (vset = 1)       |
      |    then tbtop and then skip to that row           |
      * ------------------------------------------------- */
      crp = ztdtop
      if vset = 1 then do
        vset = 0
        "TBTop test"
        "TBSkip test NUMBER("row")"
      end

      Select
        /* ------------------------- *
        | Process an individual row |
        * ------------------------- */
        When vsel = 'S' then do
          zedsmsg = null
          zedlmsg = 'Row data:' vitem
          'setmsg msg(isrz001)'
          say 'Row data:' vitem
          vstate = 'Selected'
          'tbput test'
        end
        /* ---------------------------------------------------------------- *
        | Process a range selection where the 1st row is selected using SS |
        | and then the last row with an SS.                                |
        * ---------------------------------------------------------------- */
        When vsel = 'SS' then do
          /* ------------------------------------ *
          | When only 1 SS is specified           |
          | if block indicator on then process it |
          | if not set the block indicator and    |
          | get the 1st row location              |
          * ------------------------------------- */
          if ztdsels = 1 then do
            if block = 1 then call do_ss
            else do
              block = 1
              vstate = 'SS'
              'tbput test'
              'tbquery test position(row1)'
              row2 = 0
            end
          end
          /* ---------------------------------------- *
          | When Both from SS and to SS are provided |
          | - get the 1st row                        |
          | - set row2 to 0                          |
          | - set block indicator to on              |
          * ---------------------------------------- */
          else do
            'tbquery test position(row1)'
            row2 = 0
            block = 1
          end
        end
        /* -------------------------------------- *
        | Process a selection with a count S###) |
        * -------------------------------------- */
        When left(vsel,1) = 'S' then do
          /* -------------------------------------------- *
          | Extract the count from the selection command |
          * -------------------------------------------- */
          vcount = substr(vsel,2)
          /* -------------------- *
          | Save current top row |
          * -------------------- */
          save_top = ztdtop
          /* --------------------------- *
          | Validate that it is numeric |
          * --------------------------- */
          if datatype(vcount) /= 'NUM' then do
            zedsmsg = null
            zedlmsg = 'Invalid selection' vsel '- expecting S###'
            'setmsg msg(isrz001)'
          end
          else do
            /* -------------------------- *
            | Get the current row number |
            | and the # of rows in table |
            * -------------------------- */
            'tbquery test position(row1) rownum(rows)'
            /* -------------------------------- *
            | Identify the last row to process |
            * -------------------------------- */
            row2 = row1 + (vcount - 1)
            /* -------------------------------- *
            | Test for going past end of table |
            * -------------------------------- */
            if row2 > rows then do
              zedsmsg = null
            zedlmsg = vsel 'is invalid as it goes beyond the end of the table.'
              'setmsg msg(isrz001)'
            end
            else do
              /* --------------------------------------------------- *
              | Process the 1st row and update the state in the row |
              * --------------------------------------------------- */
              say 'Row data:' vitem
              vstate = 'Selected'
              'tbput test'
              /* ------------------------------- *
              | Skip 1 row and process the rest |
              * ------------------------------- */
              'tbskip test'
              do (row2-row1)
                'tbget test'
                say 'Row data:' vitem
                vstate = 'Selected'
                'tbput test'
                'tbskip test'
              end
              'tbtop test'
              'tbskip test number('save_top')'
            end
          end
        end
        /* ------------------------------ *
        | Process unknown row selections |
        * ------------------------------ */
        Otherwise do
          zedsmsg = 'Unknown'
          zedlmsg = vsel 'is an unknown row selection - try again.'
          'setmsg msg(isrz001)'
        end
      end
      vsel = null
    end
  end
  /* ------------------------------- *
  | All done so close out the table |
  | and Exit                        |
  * ------------------------------- */
  "TBEnd test"
  Exit 0

  /* ------------------------------- *
  | Process the SS/SS Range command |
  * ------------------------------- */
Do_SS:
  /* -------------------------------- *
  | Get the row number of the 2nd SS |
  * -------------------------------- */
  'tbquery test position(row2)'
  /* -------------------------------------------------------- *
  | Test to see which SS entry is the 1st row to process and |
  | arrange row1 to the lowest row number and row2 to the    |
  | highest row number. This allows the range to be selected |
  | in either direction from any panel.                      |
  * -------------------------------------------------------- */
  if row2 < row1 then do
    rowx = row2
    row2 = row1
    row1 = rowx
  end
  /* ------------------------------------------------- *
  | Position to the top row and then skip down to the |
  | 1st row to process.                               |
  * ------------------------------------------------- */
  'tbtop test'
  'tbskip test number('row1')'
  /* ------------------------- *
  | Process the selected rows |
  * ------------------------- */
  do row2 - row1 +1
    /* ---------------- *
    | Get the row data |
    * ---------------- */
    'tbget test'
    say 'Row data:' vitem
    /* -------------------------------- *
    | Update the row state variable    |
    | Then update the row in the table |
    | Then skip to the next row.       |
    * -------------------------------- */
    vstate = 'Selected'
    'tbput test'
    'tbskip test'
  end
  /* ----------------------------------------------------- *
  | When done then reset our working variables and return |
  * ----------------------------------------------------- */
  row1 = 0
  row2 = 0
  block = 0
  ztdsels = 0
  'tbtop test'
  'tbskip test number('ztdtop')'
  return
